# -*- coding: utf-8 -*-
"""HousePricePredictionProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TKS_bi8B60HYnrG1SN8H-C6X-jDovK2E

# Importing The Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""# Importing The Boston Dataset

"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

"""# Loading The Dataset Through Pandas DataFrame"""

house_price_dataframe = pd.DataFrame(house_price_dataset.data,columns = house_price_dataset.feature_names)

print(house_price_dataframe)

"""# Print 5 Rows of The DataFrame"""

house_price_dataframe.head()

"""# Add The Target(Price) Column to The Dataset

"""

house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

"""# Checking The Rows and Columns in The DataFrame"""

house_price_dataframe.shape

house_price_dataframe.isnull().sum()

"""# Statistical Measures of The DataFrame"""

house_price_dataframe.describe()

"""# Understanding The Corelation Between Various Features
#1.Positive Corelation
#2.Negative Corelation
"""

correlation = house_price_dataframe.corr()

"""## Constructing A Heatmap For Understanding The Correlation Between The Features"""

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True,square=2, fmt='.1f',annot=True,annot_kws ={'size':10},cmap='Blues')

"""# Splitting The Data And Target

"""

# axis is 1 if we drop column axis is 0 if we drop row
X = house_price_dataframe.drop(['price'],axis=1) 
Y = house_price_dataframe['price']

print(X,Y)

"""# Splitting The Data Into Traning Data And Test Data

"""

X_train, X_test, Y_train,Y_test = train_test_split(X,Y,test_size = 0.2, random_state = 2)

print(X,X_train)

print(X.shape, X_train.shape,X_test.shape)

"""## Model Training

## XGBRegressor

#Loading The Model
"""

model = XGBRegressor()

"""#Training The Model With Training Set"""

model.fit(X_train,Y_train)

"""#Evaluation

#Accuracy For Prediction Of Training Data
"""

training_data_prediction = model.predict(X_train)

print(training_data_prediction)

"""#R Square Error"""

score_1 = metrics.r2_score(Y_train, training_data_prediction)

"""# Mean Square Error"""

score_2 = metrics.mean_absolute_error(Y_train,training_data_prediction)

print('R square error: {}'.format(score_1))

print('Mean Absolute Error: {}'.format(score_2))

"""# Visualizing the actual Prices and predicted prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Preicted Price")
plt.show()

"""# Prediction On Test Data"""

test_data_prediction = model.predict(X_test)

#R square error: 
score_1 = metrics.r2_score(Y_test, test_data_prediction)
#Mean Absolute Error: 
score_2 = metrics.mean_absolute_error(Y_test,test_data_prediction)

print('R square error: {}'.format(score_1))
print('Mean Absolute Error: {}'.format(score_2))